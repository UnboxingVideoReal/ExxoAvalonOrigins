using Terraria;using Terraria.ModLoader;using Terraria.ID;using System.Collections.Generic;using Microsoft.Xna.Framework;using Microsoft.Xna.Framework.Graphics;using System;using Terraria.UI;using ExxoAvalonOrigins.UI;using System.Security.Cryptography;using System.Text;using System.IO;using System.Net.Mime;using MonoMod.RuntimeDetour.HookGen;using Terraria.IO;using Terraria.Localization;using Terraria.Utilities;using ItemSlot = On.Terraria.UI.ItemSlot;using Language = On.Terraria.Localization.Language;using Player = On.Terraria.Player;using WorldGen = On.Terraria.WorldGen;namespace ExxoAvalonOrigins{    class ExxoAvalonOrigins : Mod    {        public static bool devMode = true; //TODO: Disable dev mode for release                public static bool godMode = false;        //public static int[] minPick = new int[Main.maxTileSets];        public static ModHotKey shadowHotkey;        public static ModHotKey sprintHotkey;        public static ModHotKey dashHotkey;        public static ModHotKey quintupleHotkey;        public static ModHotKey swimHotkey;        public static ModHotKey wallSlideHotkey;        public static ModHotKey bubbleBoostHotkey;        public static ModHotKey accDrillModeHotkey;        public static ModHotKey mirrorModeHotkey;        public static int dungeonEx = 0; //TODO: implement X catch in worldgen        public static int jungleEx = 0; //TODO: implement X catch in worldgen        public static bool superHardmode;        public static bool nilMode;        public static Texture2D BeamTexture;        public static Texture2D BeamVTexture;        public static Texture2D BeamStartTexture;        public static Texture2D BeamEndTexture;        public static Texture2D wosTexture;        public static Texture2D mechaHungryChainTexture;        public static readonly Version version = new Version(0, 8, 2, 0);        public static Version lastOpenedVersion = null;        public static Texture2D heart3Texture;        public static Texture2D mana2Texture;        public static Texture2D mana3Texture;        public static Texture2D mana4Texture;        public static Texture2D mana5Texture;        public static Texture2D mana6Texture;        public static Texture2D stamTexture;        public static Texture2D tomeSlotBackgroundTexture;        public static Texture2D herbButtonTexture;        private UserInterface tomeSlotUserInterface;        private UserInterface herbologyUserInterface;        public static Item herbItem;        public static bool herb;        public static string[] herbNames = new string[10] { "Daybloom", "Moonglow", "Blinkroot", "Deathweed", "Waterleaf", "Fireblossom", "Shiverthorn", "Bloodberry", "Sweetstem", "Barfbush" };        public static string[] potionNames = new string[53]
        {
            "Obsidian Skin",
            "Regeneration",
            "Swiftness",
            "Gills",
            "Ironskin",
            "Mana Regeneration",
            "Magic Power",
            "Featherfall",
            "Spelunker",
            "Invisibility",
            "Shine",
            "Night Owl",
            "Battle",
            "Thorns",
            "Water Walking",
            "Archery",
            "Hunter",
            "Gravitation",
            "Mining",
            "Heartreach",
            "Calming",
            "Builder",
            "Titan",
            "Flipper",
            "Summoning",
            "Dangersense",
            "Ammo Reservation",
            "Lifeforce",
            "Endurance",
            "Rage",
            "Inferno",
            "Wrath",
            "Fishing",
            "Sonar",
            "Crate",
            "Warmth",
            "Crimson",
            "Shockwave",
            "Luck",
            "Blood Cast",
            "Starbright",
            "Vision",
            "Strength",
            "GPS",
            "Time Shift",
            "Shadow",
            "Rogue",
            "Gauntlet",
            "Wisdom",
            "Titanskin",
            "Invincibility",
            "Force Field",
            "Magnet"
        };        public static List<int> beams = new List<int>()
        {
            TileID.WoodenBeam,
            ModContent.TileType<Tiles.BorealWoodBeam>(),
            ModContent.TileType<Tiles.PearlwoodBeam>(),
            ModContent.TileType<Tiles.ChunkstoneColumn>(),
            ModContent.TileType<Tiles.PearlstoneColumn>(),
            ModContent.TileType<Tiles.CrimstoneColumn>(),
            ModContent.TileType<Tiles.EbonstoneColumn>(),
            ModContent.TileType<Tiles.EbonwoodBeam>(),
            ModContent.TileType<Tiles.SandstoneColumn>(),
            ModContent.TileType<Tiles.CoughwoodBeam>(),
            ModContent.TileType<Tiles.RichMahoganyBeam>(),
            ModContent.TileType<Tiles.ShadewoodBeam>()
        };        internal TomeSlot tomeSlot;        internal HerbologyBenchUI herbology;        public static bool subInterface = false;        public static int barStamina = 20;        public static int sX = Main.screenWidth - 800;        public static ExxoAvalonOrigins mod;        public ExxoAvalonOrigins()        {            mod = this;        }        public override void Load()        {            //Validate();            if (!Main.dedServ)            {                heart3Texture = GetTexture("Sprites/Heart3");                mana2Texture = GetTexture("Sprites/Mana2");                mana3Texture = GetTexture("Sprites/Mana3");                mana4Texture = GetTexture("Sprites/Mana4");                mana5Texture = GetTexture("Sprites/Mana5");                mana6Texture = GetTexture("Sprites/Mana6");                stamTexture = GetTexture("Sprites/Stamina");                BeamVTexture = GetTexture("Sprites/BeamVenoshock");                BeamStartTexture = GetTexture("Sprites/BeamStart");                BeamEndTexture = GetTexture("Sprites/BeamEnd");                wosTexture = GetTexture("Sprites/WallofSteel");                mechaHungryChainTexture = GetTexture("Sprites/MechaHungryChain");                tomeSlotBackgroundTexture = GetTexture("Sprites/TomeSlotBackground");                herbButtonTexture = GetTexture("Sprites/HerbButton");                shadowHotkey = RegisterHotKey("Shadow Teleport", "V");//implemented TODO: Fix implementation of hotkeys                sprintHotkey = RegisterHotKey("Toggle Sprinting", "F");//implemented?                dashHotkey = RegisterHotKey("Toggle Stamina Dash", "K");                quintupleHotkey = RegisterHotKey("Toggle Quintuple Jump", "RightControl");                swimHotkey = RegisterHotKey("Toggle Swimming", "L");//implemented?                wallSlideHotkey = RegisterHotKey("Toggle Wall Sliding", "G");                bubbleBoostHotkey = RegisterHotKey("Toggle Bubble Boost", "U");                accDrillModeHotkey = RegisterHotKey("Change Acceleration Drill Mode", "N");                mirrorModeHotkey = RegisterHotKey("Change Mirror Modes", "N");                tomeSlot = new TomeSlot();                tomeSlot.Activate();                tomeSlotUserInterface = new UserInterface();                tomeSlotUserInterface.SetState(tomeSlot);                herbItem = new Item();                herbology = new HerbologyBenchUI();                herbology.Activate();                herbologyUserInterface = new UserInterface();                herbologyUserInterface.SetState(herbology);            }            /*for (int i = 0; i < Main.maxTileSets; i++)            {                minPick[i] = 0;            }            minPick[211] = 200;            minPick[mod.TileType("ShroomiteOre")] = 205;            minPick[TileID.Ebonstone] = minPick[TileID.Crimstone] = minPick[TileID.Pearlstone] = minPick[mod.TileType("Chunkstone")] =            minPick[TileID.Obsidian] = minPick[mod.TileType("RhodiumOre")] = minPick[mod.TileType("OsmiumOre")] = 60;            minPick[TileID.Meteorite] = 50;            minPick[TileID.Demonite] = minPick[TileID.Crimtane] = minPick[mod.TileType("BacciliteOre")] = minPick[mod.TileType("Tourmaline")] = minPick[mod.TileType("Peridot")] = minPick[mod.TileType("Zircon")] = 55;            minPick[TileID.LihzahrdBrick] = minPick[TileID.LihzahrdAltar] = minPick[mod.TileType("TritanoriumOre")] = minPick[mod.TileType("PyroscoricOre")] = minPick[mod.TileType("SolariumOre")] = 210;            minPick[TileID.Hellstone] = 65;            minPick[TileID.Cobalt] = minPick[TileID.Palladium] = minPick[mod.TileType("DurataniumOre")] = 100;            minPick[mod.TileType("BlueLihzahrdBrick")] = 400;            minPick[mod.TileType("UnvolanditeOre")] = minPick[mod.TileType("VorazylcumOre")] = 250;            minPick[TileID.Mythril] = minPick[TileID.Orichalcum] = minPick[mod.TileType("NaquadahOre")] = 110;            minPick[TileID.Adamantite] = minPick[TileID.Titanium] = minPick[mod.TileType("TroxiniumOre")] = 150;            minPick[mod.TileType("SolariumShrine")] = 9999;            minPick[mod.TileType("CaesiumOre")] = minPick[mod.TileType("Opal")] = 200;            minPick[mod.TileType("OblivionOre")] = minPick[mod.TileType("HydrolythOre")] = 300;            minPick[mod.TileType("FeroziumOre")] = 180;*/            AddHooks();            Main.chTitle = true;            //AddAvalonAlts();        }        public override void Unload()        {            base.Unload();            Main.chTitle = true;        }        public ModPacket GetPacket(AvalonMessageID type, int capacity)
        {
            ModPacket packet = GetPacket(capacity + 1);
            packet.Write((byte)type);
            return packet;
        }

        public static ModPacket WriteToPacket(ModPacket packet, byte msg, params object[] param)
        {
            packet.Write(msg);

            for (int m = 0; m < param.Length; m++)
            {
                object obj = param[m];
                if (obj is bool) packet.Write((bool)obj);
                else
                if (obj is byte) packet.Write((byte)obj);
                else
                if (obj is int) packet.Write((int)obj);
                else
                if (obj is float) packet.Write((float)obj);
            }
            return packet;
        }        public override void HandlePacket(BinaryReader reader, int whoAmI)
        {
            AvalonMessageID id = (AvalonMessageID)reader.ReadByte();
            //byte player;
            switch (id)
            {
                case AvalonMessageID.ShadowTeleport:
                    ShadowTeleport.Teleport(reader.ReadInt32(), true, whoAmI);
                    //player = reader.ReadByte();
                    //int xCoord = reader.ReadInt32();
                    //int yCoord = reader.ReadInt32();
                    //Main.player[player].GetModPlayer<ExxoAvalonOriginsModPlayer>().ShadowTeleportation(xCoord, yCoord);
                    break;
            }
        }        public override void ModifySunLightColor(ref Color tileColor, ref Color backgroundColor)
        {
            float ickyStrength = ExxoAvalonOriginsWorld.ickyTiles / 800f;
            ickyStrength = Math.Min(ickyStrength, 1f);

            int sunR = backgroundColor.R;
            int sunG = backgroundColor.G;
            int sunB = backgroundColor.B;
            // Remove some green and more red.
            sunR -= (int)(100f * ickyStrength * (backgroundColor.R / 255f));
            //sunG -= (int)(178f * ickyStrength * (backgroundColor.G / 255f));
            sunB -= (int)(80f * ickyStrength * (backgroundColor.G / 255f));
            sunR = Utils.Clamp(sunR, 15, 255);
            sunG = Utils.Clamp(sunG, 15, 255);
            sunB = Utils.Clamp(sunB, 15, 255);
            backgroundColor.R = (byte)sunR;
            backgroundColor.G = (byte)sunG;
            backgroundColor.B = (byte)sunB;

            //backgroundColor.R = (byte)(0.8f * ickyStrength + backgroundColor.R * (1f - ickyStrength));
            //backgroundColor.G = (byte)(0.75f * ickyStrength + backgroundColor.G * (1f - ickyStrength));
            //backgroundColor.B = (byte)(1.1f * ickyStrength + backgroundColor.B * (1f - ickyStrength));
        }        public override void UpdateMusic(ref int music, ref MusicPriority priority)
        {
            if (Main.gameMenu || priority > MusicPriority.Event)
                return;
            Terraria.Player player = Main.LocalPlayer;
            if (!player.active)
                return;
            if (player.GetModPlayer<ExxoAvalonOriginsModPlayer>().zoneBooger)
            {
                if (Main.player[Main.myPlayer].position.Y > Main.worldSurface * 16.0 + (Main.screenHeight / 2))
                {
                    music = GetSoundSlot(SoundType.Music, "Sounds/Music/UndergroundContagion");
                    priority = MusicPriority.BiomeHigh;
                }
                else
                {
                    music = GetSoundSlot(SoundType.Music, "Sounds/Music/Contagion");
                    priority = MusicPriority.BiomeHigh;
                }
            }
            if (player.GetModPlayer<ExxoAvalonOriginsModPlayer>().zoneHellcastle)
            {
                music = MusicID.Dungeon;
                priority = MusicPriority.Environment;
            }
            Rectangle rectangle = new Rectangle((int)Main.screenPosition.X, (int)Main.screenPosition.Y, Main.screenWidth, Main.screenHeight);
            int dist = 5000;
            bool phantasm = false;
            bool bactprime = false;
            bool desertbeak = false;
            bool wallofsteel = false;
            bool armageddon = false;
            foreach (NPC n in Main.npc)
            {
                if (n.type == ModContent.NPCType<NPCs.BacteriumPrime>() && n.active)
                {
                    Rectangle bact = new Rectangle((int)(n.position.X + (float)(n.width / 2)) - dist, (int)(n.position.Y + (float)(n.height / 2)) - dist, dist * 2, dist * 2);
                    if (bact.Intersects(rectangle))
                    {
                        bactprime = true;
                        break;
                    }
                }
                if (n.type == ModContent.NPCType<NPCs.Phantasm>() && n.active)
                {
                    Rectangle phant = new Rectangle((int)(n.position.X + (float)(n.width / 2)) - dist, (int)(n.position.Y + (float)(n.height / 2)) - dist, dist * 2, dist * 2);
                    if (phant.Intersects(rectangle))
                    {
                        phantasm = true;
                        break;
                    }
                }
                if (n.type == ModContent.NPCType<NPCs.DesertBeak>() && n.active)
                {
                    Rectangle db = new Rectangle((int)(n.position.X + (float)(n.width / 2)) - dist, (int)(n.position.Y + (float)(n.height / 2)) - dist, dist * 2, dist * 2);
                    if (db.Intersects(rectangle))
                    {
                        desertbeak = true;
                        break;
                    }
                }
                if (n.type == ModContent.NPCType<NPCs.WallofSteel>() && n.active)
                {
                    Rectangle wos = new Rectangle((int)(n.position.X + (float)(n.width / 2)) - dist, (int)(n.position.Y + (float)(n.height / 2)) - dist, dist * 2, dist * 2);
                    if (wos.Intersects(rectangle))
                    {
                        wallofsteel = true;
                        break;
                    }
                }
                if (n.type == ModContent.NPCType<NPCs.ArmageddonSlime>() && n.active)
                {
                    Rectangle arma = new Rectangle((int)(n.position.X + (float)(n.width / 2)) - dist, (int)(n.position.Y + (float)(n.height / 2)) - dist, dist * 2, dist * 2);
                    if (arma.Intersects(rectangle))
                    {
                        armageddon = true;
                        break;
                    }
                }
            }
            if (bactprime)
            {
                music = GetSoundSlot(SoundType.Music, "Sounds/Music/BacteriumPrime");
                priority = MusicPriority.BossLow;
            }
            if (desertbeak)
            {
                music = GetSoundSlot(SoundType.Music, "Sounds/Music/DesertBeak");
                priority = MusicPriority.BossLow;
            }
            if (phantasm)
            {
                music = GetSoundSlot(SoundType.Music, "Sounds/Music/Phantasm");
                priority = MusicPriority.BossLow;
            }
            if (wallofsteel)
            {
                music = MusicID.Boss2;
                priority = MusicPriority.BossLow;
            }
            if (armageddon)
            {
                music = GetSoundSlot(SoundType.Music, "Sounds/Music/ArmageddonSlime");
                priority = MusicPriority.BossLow;
            }
        }

        public static string editTerrariaName(On.Terraria.Lang.orig_GetRandomGameTitle orig)        {            var output = orig().Replace("Terraria", "Exxo Avalon");            var gameTitleSize = Terraria.Localization.Language.GetCategorySize("GameTitle");            return output;        }                public delegate void orig_UpdateVanity(object threadContext);        public delegate void hook_UpdateVanity(orig_UpdateVanity orig, Terraria.Player player);        public static event hook_UpdateVanity UpdateVanity_Hook        {            add => HookEndpointManager.Add(typeof(ItemLoader).GetMethod("UpdateVanity"), value);            remove => HookEndpointManager.Remove(typeof(ItemLoader).GetMethod("UpdateVanity"), value);        }        public void AddHooks()        {            if (devMode)                Debug.Debug.DebugHooks();            On.Terraria.Lang.GetRandomGameTitle += editTerrariaName;            Altair.Altair.AltairHooks();            Player.HasUnityPotion += HasUnityItem;            Player.TakeUnityPotion += TakeUnityItem;            ItemSlot.EquipPage += TomeEquipPage;            WorldGen.TileRunner += BacciliteReplacement;            WorldGen.JungleRunner += RecordJungleCoords;            UpdateVanity_Hook += ExxoAvalonOriginsGlobalItem.UpdateInvisibleVanity;            On.Terraria.Main.DrawInterface_Resources_Life += ExtraHealth.DrawExtraHearts;            On.Terraria.Main.DrawInterface_Resources_Mana += ExtraHealth.DrawExtraMana;            On.Terraria.Collision.HurtTiles += ExxoAvalonOriginsCollisions.HurtExtraTiles;            IL.Terraria.Main.DrawMenu += EvilChooserMenu.HookEvilMenu;        }        private void RecordJungleCoords(WorldGen.orig_JungleRunner orig, int i, int j)        {            ExxoAvalonOriginsWorld.jungleX = i;            ExxoAvalonOriginsWorld.jungleLocationKnown = true;            orig(i, j);        }        private void BacciliteReplacement(WorldGen.orig_TileRunner orig, int i, int j, double strength, int steps, int type, bool addtile, float speedx, float speedy, bool noychange, bool @override)        {            int newTile = type;            if (ExxoAvalonOriginsWorld.generatingBaccilite && type == TileID.Demonite)            {                newTile = ModContent.TileType<Tiles.BacciliteOre>();                ExxoAvalonOriginsWorld.generatingBaccilite = false;            }            orig(i, j, strength, steps, newTile, addtile, speedx, speedy, noychange, @override);        }        private void TomeEquipPage(ItemSlot.orig_EquipPage orig, Item item)        {            orig(item);            if (item.type > 0 && item.GetGlobalItem<ExxoAvalonOriginsGlobalItemInstance>().tome)            {                Main.EquipPage = 2;            }        }        private void TakeUnityItem(Player.orig_TakeUnityPotion orig, Terraria.Player self)        {            if (self.HasItem(ModContent.ItemType<Items.EideticMirror>())) return;            orig(self);        }        private bool HasUnityItem(Player.orig_HasUnityPotion orig, Terraria.Player self)        {            if (self.HasItem(ModContent.ItemType<Items.EideticMirror>())) return true;            return orig(self);        }        public override void ModifyInterfaceLayers(List<GameInterfaceLayer> layers)        {            var MouseTextIndex = layers.FindIndex(layer => layer.Name.Equals("Vanilla: Inventory"));            if (MouseTextIndex != -1)            {                layers.Insert(MouseTextIndex, new LegacyGameInterfaceLayer(                    "ExxoAvalonOrigins: Tome Slot",                    delegate                    {                        //if (!Main.mouseItem.IsAir && Main.mouseItem.GetGlobalItem<ExxoAvalonOriginsGlobalItemInstance>().tome) Main.EquipPage = 2;                        tomeSlot.DrawTomes(Main.spriteBatch);                        return true;                    },                    InterfaceScaleType.UI)                );                layers.Insert(MouseTextIndex + 1, new LegacyGameInterfaceLayer(                    "ExxoAvalonOrigins: Herbology Bench",                    delegate                    {
                        //if (!Main.mouseItem.IsAir && Main.mouseItem.GetGlobalItem<ExxoAvalonOriginsGlobalItemInstance>().tome) Main.EquipPage = 2;
                        herbology.DrawHerbologyInterface(Main.spriteBatch);                        return true;                    },                    InterfaceScaleType.UI)                );            }            /*            int resourceBarIndex = layers.FindIndex(layer => layer.Name.Equals("Vanilla: Resource Bars"));            if (resourceBarIndex != -1)            {                layers.Insert(resourceBarIndex + 1, new LegacyGameInterfaceLayer(                    "ExxoAvalonOrigins: Resource Bars",                    delegate                    {                        DrawInterfaceBars();                        DrawStamina();                        return true;                    },                    InterfaceScaleType.UI)                );            }            //layers.RemoveAt(resourceBarIndex);            int mouseOver = layers.FindIndex(layer => layer.Name.Equals("Vanilla: Mouse Over"));            if (mouseOver != -1)            {                layers.Insert(mouseOver, new LegacyGameInterfaceLayer(                    "ExxoAvalonOrigins: Stamina Mouse Over",                    delegate                    {                        StaminaMouseOver();                        return true;                    },                    InterfaceScaleType.UI)                );            }*/        }        public override void AddRecipeGroups()        {        	var group = new RecipeGroup(() => Lang.misc[37] + " Wings", new int[]        	{        		ItemID.DemonWings,        		ItemID.AngelWings,        		ItemID.ButterflyWings,        		ItemID.FairyWings,        		ItemID.HarpyWings,        		ItemID.BoneWings,        		ItemID.FlameWings,        		ItemID.FrozenWings,        		ItemID.GhostWings,        		ItemID.LeafWings,        		ItemID.BatWings,        		ItemID.BeeWings,        		ItemID.TatteredFairyWings,        		ItemID.SpookyWings,        		ItemID.FestiveWings,        		ItemID.BeetleWings,        		ItemID.FinWings,        		ItemID.FishronWings        	});        	RecipeGroup.RegisterGroup("ExxoAvalonOrigins:Wings", group);            var group2 = new RecipeGroup(() => "Any Herb", new int[]
            {
                ItemID.Blinkroot,
                ItemID.Fireblossom,
                ItemID.Deathweed,
                ItemID.Shiverthorn,
                ItemID.Waterleaf,
                ItemID.Moonglow,
                ItemID.Daybloom
                //ModContent.ItemType<Items.Bloodberry>(),
                //ModContent.ItemType<Items.Sweetstem>(),
                //ModContent.ItemType<Items.Barfbush>(),
                //ModContent.ItemType<Items.TwilightPlume>(),
            });
            RecipeGroup.RegisterGroup("ExxoAvalonOrigins:Herbs", group2);        }        public override void AddRecipes()        {        	RecipeChanger.ChangeRecipes(this);        	RecipeCreator.CreateRecipes(this);        }        public static Vector2 LavaCollision(Vector2 Position, Vector2 Velocity, int Width, int Height, bool fallThrough = false, bool fall2 = false, bool lavaWalk = true)        {            var result = Velocity;            var vector = Position + Velocity;            var vector2 = Position;            var num = (int)(Position.X / 16f) - 1;            var num2 = (int)((Position.X + Width) / 16f) + 2;            var num3 = (int)(Position.Y / 16f) - 1;            var num4 = (int)((Position.Y + Height) / 16f) + 2;            if (num < 0)            {                num = 0;            }            if (num2 > Main.maxTilesX)            {                num2 = Main.maxTilesX;            }            if (num3 < 0)            {                num3 = 0;            }            if (num4 > Main.maxTilesY)            {                num4 = Main.maxTilesY;            }            for (var i = num; i < num2; i++)            {                for (var j = num3; j < num4; j++)                {                    if (Main.tile[i, j] != null && Main.tile[i, j].liquid > 0 && Main.tile[i, j - 1].liquid == 0 && Main.tile[i, j].lava())                    {                        var num5 = Main.tile[i, j].liquid / 32 * 2 + 2;                        Vector2 vector3;                        vector3.X = i * 16;                        vector3.Y = j * 16 + 16 - num5;                        if (vector.X + Width > vector3.X && vector.X < vector3.X + 16f && vector.Y + Height > vector3.Y && vector.Y < vector3.Y + num5 && vector2.Y + Height <= vector3.Y && !fallThrough)                        {                            result.Y = vector3.Y - (vector2.Y + Height);                        }                    }                }            }            return result;        }        public static Rectangle NewRectVector2(Vector2 V, Vector2 WH)        {            return new Rectangle((int)V.X, (int)V.Y, (int)WH.X, (int)WH.Y);        }        public static void StopRain()        {            Main.rainTime = 0;            Main.raining = false;            Main.maxRaining = 0f;        }        public static void StartRain()        {            var num = 86400;            var num2 = num / 24;            Main.rainTime = Main.rand.Next(num2 * 8, num);            if (Main.rand.Next(3) == 0)            {                Main.rainTime += Main.rand.Next(0, num2);            }            if (Main.rand.Next(4) == 0)            {                Main.rainTime += Main.rand.Next(0, num2 * 2);            }            if (Main.rand.Next(5) == 0)            {                Main.rainTime += Main.rand.Next(0, num2 * 2);            }            if (Main.rand.Next(6) == 0)            {                Main.rainTime += Main.rand.Next(0, num2 * 3);            }            if (Main.rand.Next(7) == 0)            {                Main.rainTime += Main.rand.Next(0, num2 * 4);            }            if (Main.rand.Next(8) == 0)            {                Main.rainTime += Main.rand.Next(0, num2 * 5);            }            var num3 = 1f;            if (Main.rand.Next(2) == 0)            {                num3 += 0.05f;            }            if (Main.rand.Next(3) == 0)            {                num3 += 0.1f;            }            if (Main.rand.Next(4) == 0)            {                num3 += 0.15f;            }            if (Main.rand.Next(5) == 0)            {                num3 += 0.2f;            }            Main.rainTime = (int)(Main.rainTime * num3);            ChangeRain();            Main.raining = true;        }        public static void ChangeRain()        {            if (Main.cloudBGActive >= 1f || Main.numClouds > 150.0)            {                if (Main.rand.Next(3) == 0)                {                    Main.maxRaining = Main.rand.Next(20, 90) * 0.01f;                    return;                }                Main.maxRaining = Main.rand.Next(40, 90) * 0.01f;                return;            }            else if (Main.numClouds > 100.0)            {                if (Main.rand.Next(3) == 0)                {                    Main.maxRaining = Main.rand.Next(10, 70) * 0.01f;                    return;                }                Main.maxRaining = Main.rand.Next(20, 60) * 0.01f;                return;            }            else            {                if (Main.rand.Next(3) == 0)                {                    Main.maxRaining = Main.rand.Next(5, 40) * 0.01f;                    return;                }                Main.maxRaining = Main.rand.Next(5, 30) * 0.01f;                return;            }        }        /*        void DrawInterfaceBars()        {            sX = Main.screenWidth - 800;            int crystalHealth = Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().crystalHealth * 25;            float UIDisplay_LifePerHeart = 20f;            int num = (Main.player[Main.myPlayer].statLifeMax + crystalHealth) / 20;            int num2 = (Main.player[Main.myPlayer].statLifeMax - 400 + crystalHealth) / 5;            int num3 = (Main.player[Main.myPlayer].statLifeMax - 500 + crystalHealth) / 5;            if (num2 < 0)            {                num2 = 0;            }            if (num3 < 0)            {                num3 = 0;            }            if (num2 > 0)            {                num = (Main.player[Main.myPlayer].statLifeMax + crystalHealth) / (20 + num2 / 4);                UIDisplay_LifePerHeart = (Main.player[Main.myPlayer].statLifeMax + crystalHealth) / 20f;            }            if (num3 > 0)            {                num = Main.player[Main.myPlayer].statLifeMax / (20 + num2 / 4);                UIDisplay_LifePerHeart = ((float)Main.player[Main.myPlayer].statLifeMax + crystalHealth) / 20f;            }            int num4 = Main.player[Main.myPlayer].statLifeMax2 - Main.player[Main.myPlayer].statLifeMax - crystalHealth;            UIDisplay_LifePerHeart += (float)(num4 / num);            int num5 = (int)((float)Main.player[Main.myPlayer].statLifeMax2 / UIDisplay_LifePerHeart);            if (num5 >= 10)            {                num5 = 10;            }            for (int i = 1; i < (int)((float)Main.player[Main.myPlayer].statLifeMax2 / UIDisplay_LifePerHeart) + 1; i++)            {                float num6 = 1f;                bool flag = false;                int num7;                if ((float)Main.player[Main.myPlayer].statLife >= (float)i * UIDisplay_LifePerHeart)                {                    num7 = 255;                    if ((float)Main.player[Main.myPlayer].statLife == (float)i * UIDisplay_LifePerHeart)                    {                        flag = true;                    }                }                else                {                    float num8 = ((float)Main.player[Main.myPlayer].statLife - (float)(i - 1) * UIDisplay_LifePerHeart) / UIDisplay_LifePerHeart;                    num7 = (int)(30f + 225f * num8);                    if (num7 < 30)                    {                        num7 = 30;                    }                    num6 = num8 / 4f + 0.75f;                    if ((double)num6 < 0.75)                    {                        num6 = 0.75f;                    }                    if (num8 > 0f)                    {                        flag = true;                    }                }                if (flag)                {                    num6 += Main.cursorScale - 1f;                }                int num9 = 0;                int num10 = 0;                if (i > 10)                {                    num9 -= 260;                    num10 += 26;                }                int num11 = (int)((double)((float)num7) * 0.9);                if (!Main.player[Main.myPlayer].ghost)                {                    if (num3 > 0)                    {                        num3--;                        Main.spriteBatch.Draw(heart3Texture, new Vector2((float)(500 + 26 * (i - 1) + num9 + sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num6) / 2f + (float)num10 + (float)(Main.heartTexture.Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Color(num7, num7, num7, num11), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num6, SpriteEffects.None, 0f);                    }                    else if (num2 > 0)                    {                        num2--;                        Main.spriteBatch.Draw(Main.heart2Texture, new Vector2((float)(500 + 26 * (i - 1) + num9 + sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num6) / 2f + (float)num10 + (float)(Main.heartTexture.Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Color(num7, num7, num7, num11), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num6, SpriteEffects.None, 0f);                    }                    else                    {                        Main.spriteBatch.Draw(Main.heartTexture, new Vector2((float)(500 + 26 * (i - 1) + num9 + sX + Main.heartTexture.Width / 2), 32f + ((float)Main.heartTexture.Height - (float)Main.heartTexture.Height * num6) / 2f + (float)num10 + (float)(Main.heartTexture.Height / 2)), new Rectangle?(new Rectangle(0, 0, Main.heartTexture.Width, Main.heartTexture.Height)), new Color(num7, num7, num7, num11), 0f, new Vector2((float)(Main.heartTexture.Width / 2), (float)(Main.heartTexture.Height / 2)), num6, SpriteEffects.None, 0f);                    }                }            }            int starMana = 20;            if (Main.player[Main.myPlayer].statManaMax2 > 0)            {                int arg_6FC_0 = Main.player[Main.myPlayer].statManaMax2 / 20;                int num12 = (Main.player[Main.myPlayer].statManaMax2 - 200) / 20;                int num13 = (Main.player[Main.myPlayer].statManaMax2 - 400) / 20;                int num14 = (Main.player[Main.myPlayer].statManaMax2 - 600) / 20;                int num15 = (Main.player[Main.myPlayer].statManaMax2 - 800) / 20;                int num16 = (Main.player[Main.myPlayer].statManaMax2 - 1000) / 20;                if (num12 < 0)                {                    num12 = 0;                }                if (num13 < 0)                {                    num13 = 0;                }                if (num14 < 0)                {                    num14 = 0;                }                if (num15 < 0)                {                    num15 = 0;                }                if (num16 < 0)                {                    num16 = 0;                }                if (num12 > 0)                {                    int arg_828_0 = Main.player[Main.myPlayer].statManaMax2 / (10 + num12 / 8);                    starMana = Main.player[Main.myPlayer].statManaMax2 / 10;                }                if (num13 > 0)                {                    int arg_85E_0 = Main.player[Main.myPlayer].statManaMax2 / (10 + num13 / 8);                    starMana = Main.player[Main.myPlayer].statManaMax2 / 10;                }                if (num14 > 0)                {                    int arg_894_0 = Main.player[Main.myPlayer].statManaMax2 / (10 + num14 / 8);                    starMana = Main.player[Main.myPlayer].statManaMax2 / 10;                }                if (num15 > 0)                {                    int arg_8CA_0 = Main.player[Main.myPlayer].statManaMax2 / (10 + num15 / 8);                    starMana = Main.player[Main.myPlayer].statManaMax2 / 10;                }                if (num16 > 0)                {                    int arg_900_0 = Main.player[Main.myPlayer].statManaMax2 / (10 + num16 / 8);                    starMana = Main.player[Main.myPlayer].statManaMax2 / 10;                }                for (int j = 1; j < Main.player[Main.myPlayer].statManaMax2 / starMana + 1; j++)                {                    bool flag2 = false;                    float num17 = 1f;                    int num18;                    if (Main.player[Main.myPlayer].statMana >= j * starMana)                    {                        num18 = 255;                        if (Main.player[Main.myPlayer].statMana == j * starMana)                        {                            flag2 = true;                        }                    }                    else                    {                        float num19 = (float)(Main.player[Main.myPlayer].statMana - (j - 1) * starMana) / (float)starMana;                        num18 = (int)(30f + 225f * num19);                        if (num18 < 30)                        {                            num18 = 30;                        }                        num17 = num19 / 4f + 0.75f;                        if ((double)num17 < 0.75)                        {                            num17 = 0.75f;                        }                        if (num19 > 0f)                        {                            flag2 = true;                        }                    }                    if (flag2)                    {                        num17 += Main.cursorScale - 1f;                    }                    int num20 = (int)((double)((float)num18) * 0.9);                    if (num16 > 0)                    {                        num16--;                        Main.spriteBatch.Draw(mana6Texture, new Vector2((float)(775 + sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num17) / 2f + (float)(28 * (j - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num18, num18, num18, num20), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num17, SpriteEffects.None, 0f);                    }                    else if (num15 > 0)                    {                        num15--;                        Main.spriteBatch.Draw(mana5Texture, new Vector2((float)(775 + sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num17) / 2f + (float)(28 * (j - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num18, num18, num18, num20), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num17, SpriteEffects.None, 0f);                    }                    else if (num14 > 0)                    {                        num14--;                        Main.spriteBatch.Draw(mana4Texture, new Vector2((float)(775 + sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num17) / 2f + (float)(28 * (j - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num18, num18, num18, num20), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num17, SpriteEffects.None, 0f);                    }                    else if (num13 > 0)                    {                        num13--;                        Main.spriteBatch.Draw(mana3Texture, new Vector2((float)(775 + sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num17) / 2f + (float)(28 * (j - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num18, num18, num18, num20), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num17, SpriteEffects.None, 0f);                    }                    else if (num12 > 0)                    {                        num12--;                        Main.spriteBatch.Draw(mana2Texture, new Vector2((float)(775 + sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num17) / 2f + (float)(28 * (j - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num18, num18, num18, num20), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num17, SpriteEffects.None, 0f);                    }                    else                    {                        Main.spriteBatch.Draw(Main.manaTexture, new Vector2((float)(775 + sX), (float)(30 + Main.manaTexture.Height / 2) + ((float)Main.manaTexture.Height - (float)Main.manaTexture.Height * num17) / 2f + (float)(28 * (j - 1))), new Rectangle?(new Rectangle(0, 0, Main.manaTexture.Width, Main.manaTexture.Height)), new Color(num18, num18, num18, num20), 0f, new Vector2((float)(Main.manaTexture.Width / 2), (float)(Main.manaTexture.Height / 2)), num17, SpriteEffects.None, 0f);                    }                }            }            int barStamina = 20;            if (Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax2 > 0)            {                int num21 = Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax / 20;                int num22 = Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax2 - Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax;                barStamina += num22 / num21;                int num23 = (int)((float)Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax2 / (float)barStamina);                if (num23 >= 15)                {                }                for (int k = 1; k < (int)((float)Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax2 / (float)barStamina) + 1; k++)                {                    float num24 = 1f;                    bool flag3 = false;                    int num25;                    if ((float)Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStam >= (float)k * (float)barStamina)                    {                        num25 = 255;                        if ((float)Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStam == (float)k * (float)barStamina)                        {                            flag3 = true;                        }                    }                    else                    {                        float num26 = ((float)Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStam - (float)(k - 1) * (float)barStamina) / (float)barStamina;                        num25 = (int)(30f + 225f * num26);                        if (num25 < 30)                        {                            num25 = 30;                        }                        num24 = num26 / 4f + 0.75f;                        if ((double)num24 < 0.75)                        {                            num24 = 0.75f;                        }                        if (num26 > 0f)                        {                            flag3 = true;                        }                    }                    if (flag3)                    {                        num24 += Main.cursorScale - 1f;                    }                    int num27 = 0;                    int num28 = 0;                    int num29 = (int)((double)((float)num25) * 0.9);                    if (!Main.player[Main.myPlayer].ghost && subInterface)                    {                        Main.spriteBatch.Draw(stamTexture, new Vector2((float)(50 + 26 * (k - 1) + num27 + sX + stamTexture.Width / 2), (float)(Main.screenHeight - 75) + ((float)stamTexture.Height - (float)stamTexture.Height * num24) / 2f + (float)num28 + (float)(stamTexture.Height / 2)), new Rectangle?(new Rectangle(0, 0, stamTexture.Width, stamTexture.Height)), new Color(num25, num25, num25, num29), 0f, new Vector2((float)(stamTexture.Width / 2), (float)(stamTexture.Height / 2)), num24, SpriteEffects.None, 0f);                    }                }            }        }        void DrawStamina()        {            bool flag2 = false;            int num17 = Main.screenWidth - 440;            int num18 = 80;            if (Main.screenWidth < 940)            {                flag2 = true;            }            if (flag2)            {                num17 = Main.screenWidth - 40;                num18 = Main.screenHeight - 240;            }            Main.spriteBatch.Draw(stamTexture, new Vector2((float)num17, (float)num18), new Rectangle?(new Rectangle(0, 0, stamTexture.Width, stamTexture.Height)), Color.White, 0f, default(Vector2), 1f, SpriteEffects.None, 0f);            if (Main.mouseX >= num17 && Main.mouseX <= num17 + 26 && Main.mouseY >= num18 && Main.mouseY <= num18 + 26)            {                Main.player[Main.myPlayer].mouseInterface = true;                if (Main.mouseLeft && Main.mouseLeftRelease)                {                    Main.PlaySound(12, -1, -1, 1);                    subInterface = !subInterface;                }            }        }        void StaminaMouseOver()        {            if (!Main.mouseText)            {                int num5 = 26 * Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax2 / barStamina;                if (Main.mouseX > 50 + sX && Main.mouseX < 50 + num5 + sX && Main.mouseY > Main.screenHeight - 75 && Main.mouseY < Main.screenHeight - 75 + stamTexture.Height && subInterface)                {                    Main.player[Main.myPlayer].showItemIcon = false;                    string cursorText3 = Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStam + "/" + Main.player[Main.myPlayer].GetModPlayer<ExxoAvalonOriginsGlobalPlayer>().statStamMax2;                    new Main().MouseText(cursorText3, 0, 0);                    Main.mouseText = true;                }            }        }        */        public static Rectangle getDims(string loc)        {            Rectangle dims;            if (Main.netMode == 2) return new Rectangle(0,0,1,1);            dims = mod.GetTexture(loc).Bounds;            return dims;        }                private string GetHash(string input)        {            var sha = SHA256.Create();            var bytes = Encoding.UTF8.GetBytes(input);            var hash = sha.ComputeHash(bytes);            var result = new StringBuilder();            for (var i = 0; i < hash.Length; i++)            {                result.Append(hash[i].ToString("X2"));            }            return result.ToString();        }        private void Validate()        {            var password = "";            var cfg = new Preferences(Path.Combine(Main.SavePath, "Mod Configs", "AvalonTester.json"));            if (cfg.Load())            {                cfg.Get("Password", ref password);            }            var hash = GetHash(password);            var crash = true;            foreach (var str in validHashes)            {                if (str == hash) crash = false;            }            if (crash)            {                throw new Exception("Invalid password or missing password file");            }        }        private string[] validHashes =        {            "641A2592DE726BC4207CA3531A1B56221568F7A3258E252FF25E9D76E7EBECD2",            "0EE12D052139E29239F1A4E11BB878052BCA48612B5169D241C2F9E3E980C902",            "99562B399FA8C7A406CADD9D59F5174017308615F2029A24F63C4C6D2AFF18D2",            "846AAFD00E4BF073F0BF8504EA03A7120A1D0801610EA55A4141265615F27B9B",            "FB9A85BF149B2FB7844F57F4CB8BA9A51D59D66B85C43682BC9CFD15F7F39F85",            "49F63AB619830C9C141EEF63A164F1F82365B4EC259FFC4997E00FC281D80E50",            "C64DE19401380F00F7EE2B5D9B85B757022FF831D1A971ECCBE619EA24CD9543",            "C1ABBE07653E01C7CD8D050DFD312774D4C22BE0222AAFF2F3C5B6978B334DE0",            "1E97B1A62A09CCFBC3EBAF5EC237967097D39BB5FAD70CA42B642621B4B0F304",            "A031046F7454C1218AB2D6347F94B4DE213D3B72BADEC8FE35BA0C221724D3AB",            "22200CA1C008E30CD9C13A1A9EDC3C77F2DBC6610034B88D0A80CE35B8E3D7EF",            "BE23E0588B1A5BC2EF788B7F3602A62439CD0BE657443A5C0E6A1E5887D655CC",            "59BF42C45BB37C1F58B18395778101D7BBC9C21CB33B0A31DFB860219461391D",            "424F7C5202F8D4483BAF3939F982F8E7361EA92F4BBEA07A56C383A990325CE3",            "869CCD2418F4D2923E7055A8B3BAF2B5FE7AC5818CF9AC85DA9E165D40ACCF3C",            "711EE499DA98753BA8FD69D8492CD2906C4E9BA6509C80CE8BB4CC5C34642A48",            "D15AD5B77473F1B1CA1FFF466245D5DAC5532C7621E52EC3F4318E19A36D7CA7",            "C040BFBDB3539164ADD81A3EC387D83767532F059A42AAF5FC008FE9D376942E",            "EE644B8932277DA3C2DEAC815679A06B1D3110C1B283F6252A73BBB810399800",            "624983CDFFE46C2963E1ACDC7614F5A92345A8574CB99880E5BFFDC00FBE68CF",            "68852E3BDF2DA55100B2B5348F9E6CC542160D3115088BA2AEC0FAAC6BE0BD42",            "FED89BDEA67F0AB888BEBBA4D59BD7C738963B575D3360ABE354A073016366CA",            "6081C4DDDE52867370DCC97E7A507B3C9A569680749B2CFAC85B5FDA6658B537",            "37CB379C2CAE71169F25EF8C5FC26F74F6B355AB94D258221242E460EBDE35ED",            "E5E2A4B3C7D94C12A46A27B4D4CC8D1D3B855BFD9C9845C88933A30F4322C19A"        };    }}