using Microsoft.Xna.Framework;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using Terraria;using Terraria.ModLoader;using Terraria.ID;namespace ExxoAvalonOrigins.Projectiles{	public class TerraTyphoon : ModProjectile	{		public override void SetStaticDefaults()		{			DisplayName.SetDefault("Terra Typhoon");		}		public override void SetDefaults()		{			Rectangle dims = ExxoAvalonOrigins.getDims("Projectiles/TerraTyphoon");			projectile.width = dims.Width * 30 / 204;			projectile.height = dims.Height * 30 / 204 / Main.projFrames[projectile.type];			projectile.alpha = 255;			projectile.light = 0.9f;			projectile.aiStyle = -1;			projectile.friendly = true;			projectile.timeLeft = 540;			projectile.penetrate = -1;			projectile.tileCollide = true;			projectile.MaxUpdates = 2;			projectile.scale = 1f;			projectile.magic = true;			Main.projFrames[projectile.type] = 3;		}		public override void AI()		{			projectile.localAI[1] += 1f;			if (projectile.localAI[1] > 10f && Main.rand.Next(3) == 0)			{				var num872 = 6;				for (var num873 = 0; num873 < num872; num873++)				{					var vector66 = Vector2.Normalize(projectile.velocity) * new Vector2(projectile.width, projectile.height) / 2f;					vector66 = vector66.RotatedBy((num873 - (num872 / 2 - 1)) * 3.1415926535897931 / num872, default(Vector2)) + projectile.Center;					var value28 = ((float)(Main.rand.NextDouble() * 3.1415927410125732) - 1.57079637f).ToRotationVector2() * Main.rand.Next(3, 8);					var num874 = Dust.NewDust(vector66 + value28, 0, 0, (projectile.type == ProjectileID.Typhoon) ? 217 : ModContent.DustType<Dusts.Dust226>(), value28.X * 2f, value28.Y * 2f, 100, default(Color), 1.4f);					Main.dust[num874].noGravity = true;					Main.dust[num874].noLight = true;					Main.dust[num874].velocity /= 4f;					Main.dust[num874].velocity -= projectile.velocity;				}				projectile.alpha -= 5;				if (projectile.alpha < 50)				{					projectile.alpha = 50;				}				projectile.rotation += projectile.velocity.X * 0.1f;				projectile.frame = (int)(projectile.localAI[1] / 3f) % 3;				Lighting.AddLight((int)projectile.Center.X / 16, (int)projectile.Center.Y / 16, 0.1f, 0.4f, 0.6f);			}			var num875 = -1;			var vector67 = projectile.Center;			var num876 = 500f;			if (projectile.localAI[0] > 0f)			{				projectile.localAI[0] -= 1f;			}			if (projectile.ai[0] == 0f && projectile.localAI[0] == 0f)			{				for (var num877 = 0; num877 < 200; num877++)				{					var nPC9 = Main.npc[num877];					if (nPC9.active && !nPC9.dontTakeDamage && !nPC9.friendly && nPC9.lifeMax > 5 && (projectile.ai[0] == 0f || projectile.ai[0] == num877 + 1))					{						var vector68 = nPC9.Center;						var num878 = Vector2.Distance(vector68, vector67);						if (num878 < num876 && Collision.CanHit(projectile.position, projectile.width, projectile.height, nPC9.position, nPC9.width, nPC9.height))						{							num876 = num878;							vector67 = vector68;							num875 = num877;						}					}				}				if (num875 >= 0)				{					projectile.ai[0] = num875 + 1;					projectile.netUpdate = true;				}			}			if (projectile.localAI[0] == 0f && projectile.ai[0] == 0f)			{				projectile.localAI[0] = 30f;			}			var flag34 = false;			if (projectile.ai[0] != 0f)			{				var num879 = (int)(projectile.ai[0] - 1f);				if (Main.npc[num879].active && !Main.npc[num879].dontTakeDamage && Main.npc[num879].immune[projectile.owner] == 0)				{					var num880 = Main.npc[num879].position.X + Main.npc[num879].width / 2;					var num881 = Main.npc[num879].position.Y + Main.npc[num879].height / 2;					var num882 = Math.Abs(projectile.position.X + projectile.width / 2 - num880) + Math.Abs(projectile.position.Y + projectile.height / 2 - num881);					if (num882 < 1000f)					{						flag34 = true;						vector67 = Main.npc[num879].Center;					}				}				else				{					projectile.ai[0] = 0f;					flag34 = false;					projectile.netUpdate = true;				}			}			if (flag34)			{				var v2 = vector67 - projectile.Center;				var num883 = projectile.velocity.ToRotation();				var num884 = v2.ToRotation();				double num885 = num884 - num883;				if (num885 > 3.1415926535897931)				{					num885 -= 6.2831853071795862;				}				if (num885 < -3.1415926535897931)				{					num885 += 6.2831853071795862;				}				projectile.velocity = projectile.velocity.RotatedBy(num885 * 0.10000000149011612, default(Vector2));			}			var num886 = projectile.velocity.Length();			projectile.velocity.Normalize();			projectile.velocity *= num886 + 0.0025f;		}	}}