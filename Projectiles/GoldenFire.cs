using Microsoft.Xna.Framework;using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using Terraria;using Terraria.ModLoader;using Terraria.ID;namespace ExxoAvalonOrigins.Projectiles{	public class GoldenFire : ModProjectile	{		public override void SetStaticDefaults()		{			DisplayName.SetDefault("Golden Fire");		}		public override void SetDefaults()		{			Rectangle dims = ExxoAvalonOrigins.getDims("Projectiles/GoldenFire");			projectile.width = dims.Width * 12 / 28;			projectile.height = dims.Height * 12 / 28 / Main.projFrames[projectile.type];			projectile.alpha = 50;			projectile.timeLeft = 360;			projectile.light = 0.8f;			projectile.magic = true;			projectile.aiStyle = -1;			projectile.tileCollide = true;			projectile.friendly = true;			projectile.penetrate = 1;		}		public override void AI()		{			if (projectile.ai[0] == 0f)			{				if (projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().channeling == -1 || !Main.projectile[projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().channeling].active)				{					projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().channeling = projectile.whoAmI;				}				var num947 = Main.mouseX + Main.screenPosition.X;				var num948 = Main.mouseY + Main.screenPosition.Y;				projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().destination = new Vector2(num947, num948);				projectile.damage >>= 1;				projectile.ai[0] = 1f;			}			if (!Main.player[projectile.owner].channel)			{				projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().channeling = -1;			}			var num949 = (float)Math.Sqrt(projectile.velocity.X * projectile.velocity.X + projectile.velocity.Y * projectile.velocity.Y);			if (projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().channeling == projectile.whoAmI && projectile.timeLeft > 120 && Main.player[projectile.owner].channel)			{				var num950 = 8f;				var vector75 = new Vector2(projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().destination.X - (projectile.position.X + projectile.width * 0.5f), projectile.GetGlobalProjectile<ExxoAvalonOriginsGlobalProjectileInstance>().destination.Y - (projectile.position.Y + projectile.height * 0.5f));				var num951 = (float)Math.Sqrt(vector75.X * vector75.X + vector75.Y * vector75.Y);				vector75.X *= 1f / num951;				vector75.Y *= 1f / num951;				if (num951 <= 12f)				{					projectile.Kill();					return;				}				num951 = num950 / num951 + num949;				vector75.X *= num951;				vector75.Y *= num951;				if (vector75.X == 0f && vector75.Y == 0f)				{					projectile.Kill();					return;				}				vector75.X = ((vector75.X > 32f) ? 32f : ((vector75.X < -32f) ? -32f : vector75.X));				vector75.Y = ((vector75.Y > 32f) ? 32f : ((vector75.Y < -32f) ? -32f : vector75.Y));				vector75.Y += 0.1f;				projectile.velocity.X = vector75.X;				projectile.velocity.Y = vector75.Y;				projectile.rotation = (float)Math.Atan2(projectile.velocity.Y, projectile.velocity.X) - 2.355f;			}			else			{				projectile.velocity.Y = ((projectile.velocity.Y > 16f) ? 16f : (projectile.velocity.Y + 0.1f));				if (projectile.velocity.X < 0f)				{					projectile.velocity.X = ((projectile.velocity.X > -1f) ? -1f : (projectile.velocity.X + 0.01f));				}				else if (projectile.velocity.X > 0f)				{					projectile.velocity.X = ((projectile.velocity.X < 1f) ? 1f : (projectile.velocity.X - 0.01f));				}				projectile.rotation = (float)Math.Atan2(projectile.velocity.Y, projectile.velocity.X) - 2.355f;			}			var num952 = Dust.NewDust(projectile.position, projectile.width, projectile.height, DustID.Enchanted_Gold, projectile.velocity.X * 0.2f, projectile.velocity.Y * 0.2f, 160, default(Color), 3f);			Main.dust[num952].noGravity = true;			Main.dust[num952].velocity *= 1.4f;			if (projectile.timeLeft % 2 == 0)			{				var num953 = Dust.NewDust(projectile.position, projectile.width, projectile.height, DustID.Stone, projectile.velocity.X * 0.2f, projectile.velocity.Y * 0.2f - 1f, 180, default(Color), 1f + Main.rand.Next(2));				Main.dust[num953].noGravity = true;				Main.dust[num953].noLight = true;				Main.dust[num953].fadeIn = 3f;				return;			}		}	}}